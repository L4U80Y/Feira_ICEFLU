"""
Django settings for feira_iceflu_project project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# Removido dj_database_url pois não é mais usado na configuração do Google Cloud
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# --- CONFIGURAÇÕES DE SEGURANÇA E AMBIENTE (ATUALIZADO PARA GOOGLE CLOUD) ---

# CHAVE SECRETA
# Lida da variável de ambiente em produção. O valor de fallback é APENAS para desenvolvimento local.
# NÃO COLOQUE A CHAVE DE PRODUÇÃO DIRETAMENTE AQUI.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-fallback-key-for-local-dev-only')

# MODO DEBUG
# Desligado automaticamente em produção no Google Cloud.
# 'K_SERVICE' é uma variável de ambiente que o Google Cloud Run define automaticamente.
DEBUG = 'K_SERVICE' not in os.environ # <-- MUDANÇA: Lógica alterada de 'RENDER' para 'K_SERVICE'

# HOSTS PERMITIDOS
ALLOWED_HOSTS = []
if 'K_SERVICE' in os.environ:
    # Em produção no Cloud Run, é seguro permitir o domínio principal do serviço.
    ALLOWED_HOSTS.append('.run.app') # <-- MUDANÇA: Lógica alterada para o Google Cloud
    #ALLOWED_HOSTS.append('feira-iceflu-web-763346611327.southamerica-east1.run.app')
else:
    # Para desenvolvimento local
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'feira_app.apps.FeiraAppConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise continua útil aqui
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'feira_iceflu_project.urls'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/produtos/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'feira_iceflu_project.wsgi.application'


# --- CONFIGURAÇÃO DO BANCO DE DADOS (ATUALIZADO PARA GOOGLE CLOUD) ---

# Esta lógica alterna entre o banco de dados de produção (Cloud SQL)
# e o banco de dados de desenvolvimento local (SQLite).

if 'K_SERVICE' in os.environ:
    # Configuração para produção (lendo de variáveis de ambiente)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': f"/cloudsql/{os.environ.get('INSTANCE_CONNECTION_NAME')}",
            'USER': os.environ.get('DB_USER', 'postgres'), # 'postgres' como fallback
            'PASSWORD': os.environ.get('DB_PASSWORD'),
            'NAME': os.environ.get('DB_NAME', 'postgres'), # 'postgres' como fallback
        }
    }
else:
    # Configuração para desenvolvimento local
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br' # <-- MUDANÇA: Alterado para Português do Brasil
TIME_ZONE = 'America/Sao_Paulo' # <-- MUDANÇA: Alterado para fuso horário de São Paulo

USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'